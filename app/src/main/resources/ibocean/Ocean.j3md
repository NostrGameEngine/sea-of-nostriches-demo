MaterialDef Ocean {

    MaterialParameters {
        Int BoundDrawBuffer

        Vector3 BaseScale : 1.0 1.0 1.0
        Vector3 Scale : 1.0 1.0 1.0
        Vector3 Wind : 1.0 0.0 0.0
        TextureArray OceanMap -LINEAR
        Vector2 TileSize : 1.0 1.0
        Vector2Array Offsets
        Int NumLayers : 1
        Texture2D FoamTexture
        Texture2D RefMap -LINEAR
        Matrix4 ReflViewProj



        Float Time: 0
               
        
        Texture2D WaterNoise -LINEAR : WrapRepeat Textures/waterNoise.png



        //shadows
        Int FilterMode
        Boolean HardwareShadows

        Texture2D ShadowMap0
        Texture2D ShadowMap1
        Texture2D ShadowMap2
        Texture2D ShadowMap3
        //pointLights
        Texture2D ShadowMap4
        Texture2D ShadowMap5
        
        Float ShadowIntensity
        Vector4 Splits
        Vector2 FadeInfo

        Matrix4 LightViewProjectionMatrix0
        Matrix4 LightViewProjectionMatrix1
        Matrix4 LightViewProjectionMatrix2
        Matrix4 LightViewProjectionMatrix3
        //pointLight
        Matrix4 LightViewProjectionMatrix4
        Matrix4 LightViewProjectionMatrix5   
        Vector3 LightPos
        Vector3 LightDir

        Float PCFEdge
        Float ShadowMapSize

       
        // For instancing
        Boolean UseInstancing


        Boolean BackfaceShadows : false

         // debug the final value of the selected layer as a color output            
        Int DebugValuesMode
            // Layers:
            //   0 - albedo (un-shaded)
            //   1 - normals
            //   2 - roughness
            //   3 - metallic
            //   4 - ao
            //   5  - emissive
            //   6 - exposure
            //   7 - alpha
    }

    Technique {
        LightMode SinglePassAndImageBased
        
        VertexShader GLSL300 GLSL150 GLSL110:   ibocean/Ocean.vert
        FragmentShader GLSL300 GLSL150 GLSL110: ibocean/Ocean.frag

        WorldParameters {
            WorldViewProjectionMatrix
            CameraPosition
            WorldMatrix
            WorldNormalMatrix
            ViewProjectionMatrix
            ViewMatrix
            Time
        }

        Defines {  
            BOUND_DRAW_BUFFER: BoundDrawBuffer      
            INSTANCING : UseInstancing
            DEBUG_VALUES_MODE : DebugValuesMode      
            NUM_LAYERS: NumLayers  
            REFLECTIONS: RefMap
            TILE_SIZE: TileSize


        
        }
    }


    Technique PreShadow {

        VertexShader   GLSL300 GLSL150 GLSL100:   Common/MatDefs/Shadow/PreShadow.vert
        FragmentShader GLSL300 GLSL150 GLSL100: Common/MatDefs/Shadow/PreShadowPBR.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            BOUND_DRAW_BUFFER: BoundDrawBuffer
            DISCARD_ALPHA : AlphaDiscardThreshold
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
        }

        ForcedRenderState {
            FaceCull Off
            DepthTest On
            DepthWrite On
            PolyOffset 5 3
            ColorWrite Off
        }

    }


    Technique PostShadow {
        VertexShader   GLSL310 GLSL300 GLSL150 GLSL100:   Common/MatDefs/Shadow/PostShadow.vert
        FragmentShader GLSL310 GLSL300 GLSL150 GLSL100: Common/MatDefs/Shadow/PostShadowPBR.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            BOUND_DRAW_BUFFER: BoundDrawBuffer
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold           
            SHADOWMAP_SIZE : ShadowMapSize
            FADE : FadeInfo
            PSSM : Splits
            POINTLIGHT : LightViewProjectionMatrix5
            INSTANCING : UseInstancing
            BACKFACE_SHADOWS: BackfaceShadows
        }

        ForcedRenderState {
            Blend Modulate
            DepthWrite Off                 
            PolyOffset -0.1 0
        }
    }

    Technique PreNormalPass {

        VertexShader   GLSL300 GLSL150 GLSL100 :   Common/MatDefs/SSAO/normal.vert
        FragmentShader GLSL300 GLSL150 GLSL100 : Common/MatDefs/SSAO/normal.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            NormalMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            BOUND_DRAW_BUFFER: BoundDrawBuffer
            INSTANCING : UseInstancing
        }

    }

    Technique Glow {

        VertexShader   GLSL300 GLSL150 GLSL100:   Common/MatDefs/Misc/Unshaded.vert
        FragmentShader GLSL300 GLSL150 GLSL100: Common/MatDefs/Light/PBRGlow.frag

        WorldParameters {
            WorldViewProjectionMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            BOUND_DRAW_BUFFER: BoundDrawBuffer
            INSTANCING : UseInstancing
        }
    }

}
